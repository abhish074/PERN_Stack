{"ast":null,"code":"var _jsxFileName = \"/Users/Shared/Previously Relocated Items/Security/AB/ism canada/project/SaskFundAppC/sask-fund-app/src/components/ListClientInformation.js\";\nimport React, { Fragment, useEffect, useState } from \"react\"; // import EditTodo from \"./EditTodo\";\n\nconst ListInfo = () => {\n  const [information, setDescription] = useState(\"\"); //data getting from the input,, (\"\") default is a empty string..\n\n  const [info, setInfo] = useState([]);\n\n  const getclientInformation = async e => {\n    if (e) {\n      e.preventDefault();\n    } // e.preventDefault()\n\n\n    try {\n      const response = await fetch(`http://localhost:8000/Client_Financials/?information=${information}`);\n      const jsonData = await response.json(); //await,since it takes little time to parse the data\n\n      console.log;\n      setInfo(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  }; //useEffect will make a fetch reuquest to restful apis every time \n  //the current component is rendered...\n\n\n  useEffect(() => {\n    getclientInformation();\n  }, []); //  there are lot requests, hence using [] we make only one request\n\n  console.log(info);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Sask Fund Application\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"d-flex mt-5\",\n    onSubmit: getclientInformation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    value: information,\n    onChange: e => setDescription(e.target.value) // onChange is required to change the value,i.e it allows to add in the text field..\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Get Info\")), \" \", /*#__PURE__*/React.createElement(\"table\", {\n    class: \"table mt-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 14\n    }\n  }, \"Client Id\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 14\n    }\n  }, \"Client Information\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, info.map(info1 => /*#__PURE__*/React.createElement(\"tr\", {\n    key: info1.user_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, info1.first_name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, info1.last_name))))));\n};\n\nexport default ListInfo;","map":{"version":3,"sources":["/Users/Shared/Previously Relocated Items/Security/AB/ism canada/project/SaskFundAppC/sask-fund-app/src/components/ListClientInformation.js"],"names":["React","Fragment","useEffect","useState","ListInfo","information","setDescription","info","setInfo","getclientInformation","e","preventDefault","response","fetch","jsonData","json","console","log","err","error","message","target","value","map","info1","user_id","first_name","last_name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD,C,CACA;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,CAAC,EAAD,CAA9C,CADmB,CACgC;;AACnD,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;;AAEF,QAAMM,oBAAoB,GAAG,MAAOC,CAAP,IAAa;AACxC,QAAGA,CAAH,EAAM;AAAEA,MAAAA,CAAC,CAACC,cAAF;AAAmB,KADa,CAExC;;;AACA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,wDAAuDR,WAAY,EAArE,CAA5B;AACA,YAAMS,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB,CAFE,CAEqC;;AACvCC,MAAAA,OAAO,CAACC,GAAR;AACAT,MAAAA,OAAO,CAACM,QAAD,CAAP;AACD,KALD,CAKE,OAAOI,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACG,KAAR,CAAcD,GAAG,CAACE,OAAlB;AACD;AACF,GAXD,CAJqB,CAgBvB;AACA;;;AACElB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,EAFM,CAAT,CAlBqB,CAoBd;;AAEPO,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AAEA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGA;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHA,eAIE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAA8B,IAAA,QAAQ,EAAEE,oBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAC,cAFZ;AAGE,IAAA,KAAK,EAAEJ,WAHT;AAIE,IAAA,QAAQ,EAAEK,CAAC,IAAIJ,cAAc,CAACI,CAAC,CAACW,MAAF,CAASC,KAAV,CAJ/B,CAIiD;AAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,CAJF,EAgBG,GAhBH,eAiBE;AAAO,IAAA,KAAK,EAAC,wBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADH,eAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFH,CADF,CADF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGf,IAAI,CAACgB,GAAL,CAASC,KAAK,iBACX;AAAI,IAAA,GAAG,EAAEA,KAAK,CAACC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAK,CAACE,UAAX,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKF,KAAK,CAACG,SAAX,CAFF,CADH,CANH,CATF,CAjBF,CADF;AAgDD,CAxED;;AA0EA,eAAevB,QAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\n// import EditTodo from \"./EditTodo\";\n\nconst ListInfo = () => {\n    const [information, setDescription] = useState(\"\");//data getting from the input,, (\"\") default is a empty string..\n    const [info, setInfo] = useState([]);\n  \n  const getclientInformation = async (e) => {\n    if(e) { e.preventDefault()}\n    // e.preventDefault()\n    try {\n      const response = await fetch(`http://localhost:8000/Client_Financials/?information=${information}`);\n      const jsonData = await response.json();//await,since it takes little time to parse the data\n      console.log\n      setInfo(jsonData);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n//useEffect will make a fetch reuquest to restful apis every time \n//the current component is rendered...\n  useEffect(() => {\n    getclientInformation();\n  }, []);//  there are lot requests, hence using [] we make only one request\n\n  console.log(info);\n\n  return (\n    <Fragment>\n       \n       {/* Form */}\n    <h1 className=\"text-center mt-5\">Sask Fund Application</h1>\n      <form className=\"d-flex mt-5\" onSubmit={getclientInformation}>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={information}\n          onChange={e => setDescription(e.target.value)} // onChange is required to change the value,i.e it allows to add in the text field..\n        />\n        <button className=\"btn btn-success\">Get Info</button>\n      </form>\n        {/* form end */}\n\n\n      {\" \"}\n      <table class=\"table mt-5 text-center\">\n        <thead>\n          <tr>\n             <th>Client Id</th>\n             <th>Client Information</th>\n            {/* <th>Edit</th>\n            <th>Delete</th> */}\n          </tr>\n        </thead>\n        <tbody>\n          {/* <tr>\n            <td>John</td>\n            <td>Doe</td>\n            <td>john@example.com</td>\n          </tr> */}\n          {info.map(info1 => (\n              <tr key={info1.user_id}>\n                <td>{info1.first_name}</td>\n                <td>{info1.last_name}</td>\n              </tr>\n            \n          ))}\n        </tbody>\n      </table>\n    </Fragment>\n  );\n\n  \n\n\n};\n\nexport default ListInfo;"]},"metadata":{},"sourceType":"module"}