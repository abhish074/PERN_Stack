{"ast":null,"code":"var _jsxFileName = \"/Users/Shared/Previously Relocated Items/Security/AB/ism canada/project/SaskFundAppC/sask-fund-app/src/components/ListClientInformation.js\";\nimport React, { Fragment, useEffect, useState } from \"react\";\n\nconst ListInfo = () => {\n  const [client_id, setDescription] = useState(\"\"); //data getting from the input,, (\"\") default is a empty string..\n\n  const [info1, setInfo] = useState([]); // const [idclient] = useState([])\n\n  const getclientInformation = async e => {\n    if (e) {\n      e.preventDefault();\n    } // e.preventDefault()\n\n\n    if (client_id && client_id.trim().length > 0) {\n      try {\n        console.log(client_id);\n        const response = await fetch(`http://localhost:8000/Client_Financials/?information=${client_id}`);\n        const jsonData = await response.json(); //await,since it takes little time to parse the data\n        //   console.log\n\n        setInfo(jsonData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    } else {\n      setInfo([]);\n    }\n  }; //useEffect will make a fetch reuquest to restful apis every time \n  //the current component is rendered...\n\n\n  useEffect(() => {\n    // if (information && information.trim().length > 0) {\n    getclientInformation(); // }  \n  }, []); //  there are lot requests, hence using [] we make only one request\n\n  console.log(info1);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, \"Sask Fund Application\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"d-flex mt-5\",\n    onSubmit: getclientInformation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Enter Client Name\",\n    value: client_id,\n    onChange: e => setDescription(e.target.value) // onChange is required to change the value,i.e it allows to add in the text field..\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Get Info\")), \" \", /*#__PURE__*/React.createElement(\"table\", {\n    class: \"table mt-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 14\n    }\n  }, \"Client Id\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 14\n    }\n  }, \"Client Information\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, info1 ? info1.map(info1 => /*#__PURE__*/React.createElement(\"tr\", {\n    key: info1.client_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, info1.client_id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, info1.information))) : \"\")));\n};\n\nexport default ListInfo;","map":{"version":3,"sources":["/Users/Shared/Previously Relocated Items/Security/AB/ism canada/project/SaskFundAppC/sask-fund-app/src/components/ListClientInformation.js"],"names":["React","Fragment","useEffect","useState","ListInfo","client_id","setDescription","info1","setInfo","getclientInformation","e","preventDefault","trim","length","console","log","response","fetch","jsonData","json","err","error","message","target","value","map","information"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\n\n\nconst ListInfo = () => {\n    const [client_id, setDescription] = useState(\"\");//data getting from the input,, (\"\") default is a empty string..\n    const [info1, setInfo] = useState([]);\n    // const [idclient] = useState([])\n\n  const getclientInformation = async (e) => {\n    if(e) { e.preventDefault()}\n    // e.preventDefault()\n    if (client_id && client_id.trim().length > 0) {\n        try {\n            console.log(client_id)\n            const response = await fetch(`http://localhost:8000/Client_Financials/?information=${client_id}`);\n            const jsonData = await response.json();//await,since it takes little time to parse the data\n          //   console.log\n            setInfo(jsonData);\n          } catch (err) {\n            console.error(err.message);\n          }\n    } \n    \n    else {\n        setInfo([])\n    }\n  };\n//useEffect will make a fetch reuquest to restful apis every time \n//the current component is rendered...\n  useEffect(() => {\n    \n    // if (information && information.trim().length > 0) {\n        getclientInformation();\n    // }  \n  }, []);//  there are lot requests, hence using [] we make only one request\n\n  console.log(info1);\n\n  return (\n    <Fragment>\n       \n       {/* Form */}\n    <h1 className=\"text-center mt-5\">Sask Fund Application</h1>\n      <form className=\"d-flex mt-5\" onSubmit={getclientInformation}>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Enter Client Name\"\n          value={client_id}\n          onChange={e => setDescription(e.target.value)} // onChange is required to change the value,i.e it allows to add in the text field..\n        />\n        \n        <button className=\"btn btn-success\">Get Info</button>\n      </form>\n        {/* form end */}\n\n\n      {\" \"}\n      <table class=\"table mt-5 text-center\">\n        <thead>\n          <tr>\n             <th>Client Id</th>\n             <th>Client Information</th>\n            {/* <th>Edit</th>\n            <th>Delete</th> */}\n          </tr>\n        </thead>\n        <tbody>\n          {/* <tr>\n            <td>John</td>\n            <td>Doe</td>\n            <td>john@example.com</td>\n          </tr> */}\n          {info1 ? info1.map(info1 => (\n              <tr key={info1.client_id}>\n                <td>{info1.client_id}</td>\n                <td>{info1.information}</td>\n              </tr>\n            \n          )): \"\"}\n        </tbody>\n      </table>\n      \n    </Fragment>\n  );\n};\n\nexport default ListInfo;"]},"metadata":{},"sourceType":"module"}